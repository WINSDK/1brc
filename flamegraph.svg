<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="629.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="629.00"> </text><svg id="frames" x="10" width="1180" total_samples="37723"><g><title>[[stack]] (382 samples, 1.01%)</title><rect x="0.0000%" y="565" width="1.0126%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="382"/><text x="0.2500%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (382 samples, 1.01%)</title><rect x="0.0000%" y="549" width="1.0126%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="382"/><text x="0.2500%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (382 samples, 1.01%)</title><rect x="0.0000%" y="533" width="1.0126%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="382"/><text x="0.2500%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (382 samples, 1.01%)</title><rect x="0.0000%" y="517" width="1.0126%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="382"/><text x="0.2500%" y="527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (382 samples, 1.01%)</title><rect x="0.0000%" y="501" width="1.0126%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="382"/><text x="0.2500%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (382 samples, 1.01%)</title><rect x="0.0000%" y="485" width="1.0126%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="382"/><text x="0.2500%" y="495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (382 samples, 1.01%)</title><rect x="0.0000%" y="469" width="1.0126%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="382"/><text x="0.2500%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (382 samples, 1.01%)</title><rect x="0.0000%" y="453" width="1.0126%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="382"/><text x="0.2500%" y="463.50"></text></g><g><title>core::hash::Hasher::write_u8 (151 samples, 0.40%)</title><rect x="0.6124%" y="437" width="0.4003%" height="15" fill="rgb(218,30,26)" fg:x="231" fg:w="151"/><text x="0.8624%" y="447.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (550 samples, 1.46%)</title><rect x="1.0126%" y="549" width="1.4580%" height="15" fill="rgb(220,122,19)" fg:x="382" fg:w="550"/><text x="1.2626%" y="559.50"></text></g><g><title>[anon] (752 samples, 1.99%)</title><rect x="1.0126%" y="565" width="1.9935%" height="15" fill="rgb(250,228,42)" fg:x="382" fg:w="752"/><text x="1.2626%" y="575.50">[..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (202 samples, 0.54%)</title><rect x="2.4706%" y="549" width="0.5355%" height="15" fill="rgb(240,193,28)" fg:x="932" fg:w="202"/><text x="2.7206%" y="559.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.02%)</title><rect x="3.0061%" y="565" width="0.0186%" height="15" fill="rgb(216,20,37)" fg:x="1134" fg:w="7"/><text x="3.2561%" y="575.50"></text></g><g><title>[libc.so.6] (199 samples, 0.53%)</title><rect x="3.0247%" y="549" width="0.5275%" height="15" fill="rgb(206,188,39)" fg:x="1141" fg:w="199"/><text x="3.2747%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (143 samples, 0.38%)</title><rect x="3.5522%" y="549" width="0.3791%" height="15" fill="rgb(217,207,13)" fg:x="1340" fg:w="143"/><text x="3.8022%" y="559.50"></text></g><g><title>[measurement_data.txt] (519 samples, 1.38%)</title><rect x="3.0247%" y="565" width="1.3758%" height="15" fill="rgb(231,73,38)" fg:x="1141" fg:w="519"/><text x="3.2747%" y="575.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (177 samples, 0.47%)</title><rect x="3.9313%" y="549" width="0.4692%" height="15" fill="rgb(225,20,46)" fg:x="1483" fg:w="177"/><text x="4.1813%" y="559.50"></text></g><g><title>&lt;onebrc::Rows as core::iter::traits::iterator::Iterator&gt;::next (1,098 samples, 2.91%)</title><rect x="4.4456%" y="549" width="2.9107%" height="15" fill="rgb(210,31,41)" fg:x="1677" fg:w="1098"/><text x="4.6956%" y="559.50">&lt;o..</text></g><g><title>memchr::memchr::memchr (369 samples, 0.98%)</title><rect x="6.3781%" y="533" width="0.9782%" height="15" fill="rgb(221,200,47)" fg:x="2406" fg:w="369"/><text x="6.6281%" y="543.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (369 samples, 0.98%)</title><rect x="6.3781%" y="517" width="0.9782%" height="15" fill="rgb(226,26,5)" fg:x="2406" fg:w="369"/><text x="6.6281%" y="527.50"></text></g><g><title>memchr::memchr::memchr::_{{closure}} (369 samples, 0.98%)</title><rect x="6.3781%" y="501" width="0.9782%" height="15" fill="rgb(249,33,26)" fg:x="2406" fg:w="369"/><text x="6.6281%" y="511.50"></text></g><g><title>memchr::memchr::memchr_raw (369 samples, 0.98%)</title><rect x="6.3781%" y="485" width="0.9782%" height="15" fill="rgb(235,183,28)" fg:x="2406" fg:w="369"/><text x="6.6281%" y="495.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (369 samples, 0.98%)</title><rect x="6.3781%" y="469" width="0.9782%" height="15" fill="rgb(221,5,38)" fg:x="2406" fg:w="369"/><text x="6.6281%" y="479.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (1,105 samples, 2.93%)</title><rect x="7.3563%" y="549" width="2.9292%" height="15" fill="rgb(247,18,42)" fg:x="2775" fg:w="1105"/><text x="7.6063%" y="559.50">co..</text></g><g><title>core::num::dec2flt::dec2flt (901 samples, 2.39%)</title><rect x="7.8970%" y="533" width="2.3885%" height="15" fill="rgb(241,131,45)" fg:x="2979" fg:w="901"/><text x="8.1470%" y="543.50">co..</text></g><g><title>core::num::dec2flt::parse::parse_number (336 samples, 0.89%)</title><rect x="10.2855%" y="549" width="0.8907%" height="15" fill="rgb(249,31,29)" fg:x="3880" fg:w="336"/><text x="10.5355%" y="559.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (336 samples, 0.89%)</title><rect x="10.2855%" y="533" width="0.8907%" height="15" fill="rgb(225,111,53)" fg:x="3880" fg:w="336"/><text x="10.5355%" y="543.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (336 samples, 0.89%)</title><rect x="10.2855%" y="517" width="0.8907%" height="15" fill="rgb(238,160,17)" fg:x="3880" fg:w="336"/><text x="10.5355%" y="527.50"></text></g><g><title>hashbrown::map::make_hash (157 samples, 0.42%)</title><rect x="12.7084%" y="533" width="0.4162%" height="15" fill="rgb(214,148,48)" fg:x="4794" fg:w="157"/><text x="12.9584%" y="543.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1,013 samples, 2.69%)</title><rect x="11.1762%" y="549" width="2.6854%" height="15" fill="rgb(232,36,49)" fg:x="4216" fg:w="1013"/><text x="11.4262%" y="559.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (278 samples, 0.74%)</title><rect x="13.1246%" y="533" width="0.7370%" height="15" fill="rgb(209,103,24)" fg:x="4951" fg:w="278"/><text x="13.3746%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (278 samples, 0.74%)</title><rect x="13.1246%" y="517" width="0.7370%" height="15" fill="rgb(229,88,8)" fg:x="4951" fg:w="278"/><text x="13.3746%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (278 samples, 0.74%)</title><rect x="13.1246%" y="501" width="0.7370%" height="15" fill="rgb(213,181,19)" fg:x="4951" fg:w="278"/><text x="13.3746%" y="511.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (278 samples, 0.74%)</title><rect x="13.1246%" y="485" width="0.7370%" height="15" fill="rgb(254,191,54)" fg:x="4951" fg:w="278"/><text x="13.3746%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (278 samples, 0.74%)</title><rect x="13.1246%" y="469" width="0.7370%" height="15" fill="rgb(241,83,37)" fg:x="4951" fg:w="278"/><text x="13.3746%" y="479.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (278 samples, 0.74%)</title><rect x="13.1246%" y="453" width="0.7370%" height="15" fill="rgb(233,36,39)" fg:x="4951" fg:w="278"/><text x="13.3746%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (278 samples, 0.74%)</title><rect x="13.1246%" y="437" width="0.7370%" height="15" fill="rgb(226,3,54)" fg:x="4951" fg:w="278"/><text x="13.3746%" y="447.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (278 samples, 0.74%)</title><rect x="13.1246%" y="421" width="0.7370%" height="15" fill="rgb(245,192,40)" fg:x="4951" fg:w="278"/><text x="13.3746%" y="431.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (278 samples, 0.74%)</title><rect x="13.1246%" y="405" width="0.7370%" height="15" fill="rgb(238,167,29)" fg:x="4951" fg:w="278"/><text x="13.3746%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (332 samples, 0.88%)</title><rect x="14.9034%" y="533" width="0.8801%" height="15" fill="rgb(232,182,51)" fg:x="5622" fg:w="332"/><text x="15.1534%" y="543.50"></text></g><g><title>memchr::memchr::memchr (189 samples, 0.50%)</title><rect x="15.7835%" y="533" width="0.5010%" height="15" fill="rgb(231,60,39)" fg:x="5954" fg:w="189"/><text x="16.0335%" y="543.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (189 samples, 0.50%)</title><rect x="15.7835%" y="517" width="0.5010%" height="15" fill="rgb(208,69,12)" fg:x="5954" fg:w="189"/><text x="16.0335%" y="527.50"></text></g><g><title>memchr::memchr::memchr::_{{closure}} (189 samples, 0.50%)</title><rect x="15.7835%" y="501" width="0.5010%" height="15" fill="rgb(235,93,37)" fg:x="5954" fg:w="189"/><text x="16.0335%" y="511.50"></text></g><g><title>memchr::memchr::memchr_raw (189 samples, 0.50%)</title><rect x="15.7835%" y="485" width="0.5010%" height="15" fill="rgb(213,116,39)" fg:x="5954" fg:w="189"/><text x="16.0335%" y="495.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (189 samples, 0.50%)</title><rect x="15.7835%" y="469" width="0.5010%" height="15" fill="rgb(222,207,29)" fg:x="5954" fg:w="189"/><text x="16.0335%" y="479.50"></text></g><g><title>[unknown] (4,647 samples, 12.32%)</title><rect x="4.4005%" y="565" width="12.3187%" height="15" fill="rgb(206,96,30)" fg:x="1660" fg:w="4647"/><text x="4.6505%" y="575.50">[unknown]</text></g><g><title>onebrc::parse (1,078 samples, 2.86%)</title><rect x="13.8616%" y="549" width="2.8577%" height="15" fill="rgb(218,138,4)" fg:x="5229" fg:w="1078"/><text x="14.1116%" y="559.50">on..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (164 samples, 0.43%)</title><rect x="16.2845%" y="533" width="0.4347%" height="15" fill="rgb(250,191,14)" fg:x="6143" fg:w="164"/><text x="16.5345%" y="543.50"></text></g><g><title>_rtld_global (371 samples, 0.98%)</title><rect x="16.7192%" y="565" width="0.9835%" height="15" fill="rgb(239,60,40)" fg:x="6307" fg:w="371"/><text x="16.9692%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (371 samples, 0.98%)</title><rect x="16.7192%" y="549" width="0.9835%" height="15" fill="rgb(206,27,48)" fg:x="6307" fg:w="371"/><text x="16.9692%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (57 samples, 0.15%)</title><rect x="21.7401%" y="245" width="0.1511%" height="15" fill="rgb(225,35,8)" fg:x="8201" fg:w="57"/><text x="21.9901%" y="255.50"></text></g><g><title>core::str::converts::from_utf8 (1,639 samples, 4.34%)</title><rect x="17.7027%" y="277" width="4.3448%" height="15" fill="rgb(250,213,24)" fg:x="6678" fg:w="1639"/><text x="17.9527%" y="287.50">core:..</text></g><g><title>core::str::validations::run_utf8_validation (1,639 samples, 4.34%)</title><rect x="17.7027%" y="261" width="4.3448%" height="15" fill="rgb(247,123,22)" fg:x="6678" fg:w="1639"/><text x="17.9527%" y="271.50">core:..</text></g><g><title>core::str::validations::utf8_char_width (59 samples, 0.16%)</title><rect x="21.8912%" y="245" width="0.1564%" height="15" fill="rgb(231,138,38)" fg:x="8258" fg:w="59"/><text x="22.1412%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (515 samples, 1.37%)</title><rect x="25.5998%" y="245" width="1.3652%" height="15" fill="rgb(231,145,46)" fg:x="9657" fg:w="515"/><text x="25.8498%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::index (515 samples, 1.37%)</title><rect x="25.5998%" y="229" width="1.3652%" height="15" fill="rgb(251,118,11)" fg:x="9657" fg:w="515"/><text x="25.8498%" y="239.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (515 samples, 1.37%)</title><rect x="25.5998%" y="213" width="1.3652%" height="15" fill="rgb(217,147,25)" fg:x="9657" fg:w="515"/><text x="25.8498%" y="223.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (353 samples, 0.94%)</title><rect x="26.0292%" y="197" width="0.9358%" height="15" fill="rgb(247,81,37)" fg:x="9819" fg:w="353"/><text x="26.2792%" y="207.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_utf8_char_boundary (166 samples, 0.44%)</title><rect x="26.5249%" y="181" width="0.4400%" height="15" fill="rgb(209,12,38)" fg:x="10006" fg:w="166"/><text x="26.7749%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (219 samples, 0.58%)</title><rect x="26.9650%" y="165" width="0.5805%" height="15" fill="rgb(227,1,9)" fg:x="10172" fg:w="219"/><text x="27.2150%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_load (219 samples, 0.58%)</title><rect x="26.9650%" y="149" width="0.5805%" height="15" fill="rgb(248,47,43)" fg:x="10172" fg:w="219"/><text x="27.2150%" y="159.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (774 samples, 2.05%)</title><rect x="27.5455%" y="165" width="2.0518%" height="15" fill="rgb(221,10,30)" fg:x="10391" fg:w="774"/><text x="27.7955%" y="175.50">m..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (933 samples, 2.47%)</title><rect x="29.5973%" y="165" width="2.4733%" height="15" fill="rgb(210,229,1)" fg:x="11165" fg:w="933"/><text x="29.8473%" y="175.50">me..</text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (562 samples, 1.49%)</title><rect x="30.5808%" y="149" width="1.4898%" height="15" fill="rgb(222,148,37)" fg:x="11536" fg:w="562"/><text x="30.8308%" y="159.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (562 samples, 1.49%)</title><rect x="30.5808%" y="133" width="1.4898%" height="15" fill="rgb(234,67,33)" fg:x="11536" fg:w="562"/><text x="30.8308%" y="143.50"></text></g><g><title>memchr::vector::x86avx2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m256i&gt;::movemask (377 samples, 1.00%)</title><rect x="31.0712%" y="117" width="0.9994%" height="15" fill="rgb(247,98,35)" fg:x="11721" fg:w="377"/><text x="31.3212%" y="127.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (377 samples, 1.00%)</title><rect x="31.0712%" y="101" width="0.9994%" height="15" fill="rgb(247,138,52)" fg:x="11721" fg:w="377"/><text x="31.3212%" y="111.50"></text></g><g><title>&lt;onebrc::Rows as core::iter::traits::iterator::Iterator&gt;::next (4,118 samples, 10.92%)</title><rect x="23.5798%" y="261" width="10.9164%" height="15" fill="rgb(213,79,30)" fg:x="8895" fg:w="4118"/><text x="23.8298%" y="271.50">&lt;onebrc::Rows as..</text></g><g><title>memchr::memchr::memchr (2,841 samples, 7.53%)</title><rect x="26.9650%" y="245" width="7.5312%" height="15" fill="rgb(246,177,23)" fg:x="10172" fg:w="2841"/><text x="27.2150%" y="255.50">memchr::me..</text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (2,841 samples, 7.53%)</title><rect x="26.9650%" y="229" width="7.5312%" height="15" fill="rgb(230,62,27)" fg:x="10172" fg:w="2841"/><text x="27.2150%" y="239.50">memchr::ar..</text></g><g><title>memchr::memchr::memchr::_{{closure}} (2,841 samples, 7.53%)</title><rect x="26.9650%" y="213" width="7.5312%" height="15" fill="rgb(216,154,8)" fg:x="10172" fg:w="2841"/><text x="27.2150%" y="223.50">memchr::me..</text></g><g><title>memchr::memchr::memchr_raw (2,841 samples, 7.53%)</title><rect x="26.9650%" y="197" width="7.5312%" height="15" fill="rgb(244,35,45)" fg:x="10172" fg:w="2841"/><text x="27.2150%" y="207.50">memchr::me..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (2,841 samples, 7.53%)</title><rect x="26.9650%" y="181" width="7.5312%" height="15" fill="rgb(251,115,12)" fg:x="10172" fg:w="2841"/><text x="27.2150%" y="191.50">memchr::ar..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (915 samples, 2.43%)</title><rect x="32.0706%" y="165" width="2.4256%" height="15" fill="rgb(240,54,50)" fg:x="12098" fg:w="915"/><text x="32.3206%" y="175.50">me..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::new_unchecked (374 samples, 0.99%)</title><rect x="33.5048%" y="149" width="0.9914%" height="15" fill="rgb(233,84,52)" fg:x="12639" fg:w="374"/><text x="33.7548%" y="159.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (19 samples, 0.05%)</title><rect x="34.4962%" y="261" width="0.0504%" height="15" fill="rgb(207,117,47)" fg:x="13013" fg:w="19"/><text x="34.7462%" y="271.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (182 samples, 0.48%)</title><rect x="38.1491%" y="197" width="0.4825%" height="15" fill="rgb(249,43,39)" fg:x="14391" fg:w="182"/><text x="38.3991%" y="207.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (398 samples, 1.06%)</title><rect x="38.6316%" y="197" width="1.0551%" height="15" fill="rgb(209,38,44)" fg:x="14573" fg:w="398"/><text x="38.8816%" y="207.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (961 samples, 2.55%)</title><rect x="37.6190%" y="213" width="2.5475%" height="15" fill="rgb(236,212,23)" fg:x="14191" fg:w="961"/><text x="37.8690%" y="223.50">co..</text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (181 samples, 0.48%)</title><rect x="39.6867%" y="197" width="0.4798%" height="15" fill="rgb(242,79,21)" fg:x="14971" fg:w="181"/><text x="39.9367%" y="207.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (200 samples, 0.53%)</title><rect x="50.1842%" y="149" width="0.5302%" height="15" fill="rgb(211,96,35)" fg:x="18931" fg:w="200"/><text x="50.4342%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (210 samples, 0.56%)</title><rect x="50.7144%" y="133" width="0.5567%" height="15" fill="rgb(253,215,40)" fg:x="19131" fg:w="210"/><text x="50.9644%" y="143.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (6,446 samples, 17.09%)</title><rect x="34.5466%" y="261" width="17.0877%" height="15" fill="rgb(211,81,21)" fg:x="13032" fg:w="6446"/><text x="34.7966%" y="271.50">core::str::&lt;impl str&gt;::par..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (6,446 samples, 17.09%)</title><rect x="34.5466%" y="245" width="17.0877%" height="15" fill="rgb(208,190,38)" fg:x="13032" fg:w="6446"/><text x="34.7966%" y="255.50">core::num::dec2flt::&lt;impl ..</text></g><g><title>core::num::dec2flt::dec2flt (6,446 samples, 17.09%)</title><rect x="34.5466%" y="229" width="17.0877%" height="15" fill="rgb(235,213,38)" fg:x="13032" fg:w="6446"/><text x="34.7966%" y="239.50">core::num::dec2flt::dec2flt</text></g><g><title>core::num::dec2flt::parse::parse_number (4,326 samples, 11.47%)</title><rect x="40.1665%" y="213" width="11.4678%" height="15" fill="rgb(237,122,38)" fg:x="15152" fg:w="4326"/><text x="40.4165%" y="223.50">core::num::dec2fl..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (3,798 samples, 10.07%)</title><rect x="41.5662%" y="197" width="10.0681%" height="15" fill="rgb(244,218,35)" fg:x="15680" fg:w="3798"/><text x="41.8162%" y="207.50">core::num::dec2..</text></g><g><title>core::num::dec2flt::parse::try_parse_digits (2,449 samples, 6.49%)</title><rect x="45.1422%" y="181" width="6.4921%" height="15" fill="rgb(240,68,47)" fg:x="17029" fg:w="2449"/><text x="45.3922%" y="191.50">core::num..</text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (1,904 samples, 5.05%)</title><rect x="46.5870%" y="165" width="5.0473%" height="15" fill="rgb(210,16,53)" fg:x="17574" fg:w="1904"/><text x="46.8370%" y="175.50">&lt;[u8] ..</text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (347 samples, 0.92%)</title><rect x="50.7144%" y="149" width="0.9199%" height="15" fill="rgb(235,124,12)" fg:x="19131" fg:w="347"/><text x="50.9644%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (137 samples, 0.36%)</title><rect x="51.2711%" y="133" width="0.3632%" height="15" fill="rgb(224,169,11)" fg:x="19341" fg:w="137"/><text x="51.5211%" y="143.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (193 samples, 0.51%)</title><rect x="51.6343%" y="245" width="0.5116%" height="15" fill="rgb(250,166,2)" fg:x="19478" fg:w="193"/><text x="51.8843%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (193 samples, 0.51%)</title><rect x="51.6343%" y="229" width="0.5116%" height="15" fill="rgb(242,216,29)" fg:x="19478" fg:w="193"/><text x="51.8843%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (185 samples, 0.49%)</title><rect x="51.6555%" y="213" width="0.4904%" height="15" fill="rgb(230,116,27)" fg:x="19486" fg:w="185"/><text x="51.9055%" y="223.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_utf8_char_boundary (185 samples, 0.49%)</title><rect x="51.6555%" y="197" width="0.4904%" height="15" fill="rgb(228,99,48)" fg:x="19486" fg:w="185"/><text x="51.9055%" y="207.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_utf8_char_boundary (207 samples, 0.55%)</title><rect x="52.1751%" y="197" width="0.5487%" height="15" fill="rgb(253,11,6)" fg:x="19682" fg:w="207"/><text x="52.4251%" y="207.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (414 samples, 1.10%)</title><rect x="51.6343%" y="261" width="1.0975%" height="15" fill="rgb(247,143,39)" fg:x="19478" fg:w="414"/><text x="51.8843%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::index (221 samples, 0.59%)</title><rect x="52.1459%" y="245" width="0.5858%" height="15" fill="rgb(236,97,10)" fg:x="19671" fg:w="221"/><text x="52.3959%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get (221 samples, 0.59%)</title><rect x="52.1459%" y="229" width="0.5858%" height="15" fill="rgb(233,208,19)" fg:x="19671" fg:w="221"/><text x="52.3959%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (210 samples, 0.56%)</title><rect x="52.1751%" y="213" width="0.5567%" height="15" fill="rgb(216,164,2)" fg:x="19682" fg:w="210"/><text x="52.4251%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (169 samples, 0.45%)</title><rect x="52.7318%" y="229" width="0.4480%" height="15" fill="rgb(220,129,5)" fg:x="19892" fg:w="169"/><text x="52.9818%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (11 samples, 0.03%)</title><rect x="58.6088%" y="149" width="0.0292%" height="15" fill="rgb(242,17,10)" fg:x="22109" fg:w="11"/><text x="58.8588%" y="159.50"></text></g><g><title>memchr::arch::generic::memchr::fwd_byte_by_byte (1,390 samples, 3.68%)</title><rect x="55.3800%" y="165" width="3.6848%" height="15" fill="rgb(242,107,0)" fg:x="20891" fg:w="1390"/><text x="55.6300%" y="175.50">memc..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw::_{{closure}} (161 samples, 0.43%)</title><rect x="58.6380%" y="149" width="0.4268%" height="15" fill="rgb(251,28,31)" fg:x="22120" fg:w="161"/><text x="58.8880%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (10 samples, 0.03%)</title><rect x="59.1204%" y="133" width="0.0265%" height="15" fill="rgb(233,223,10)" fg:x="22302" fg:w="10"/><text x="59.3704%" y="143.50"></text></g><g><title>&lt;memchr::vector::SensibleMoveMask as memchr::vector::MoveMask&gt;::has_non_zero (6 samples, 0.02%)</title><rect x="59.3219%" y="117" width="0.0159%" height="15" fill="rgb(215,21,27)" fg:x="22378" fg:w="6"/><text x="59.5719%" y="127.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (10 samples, 0.03%)</title><rect x="59.3378%" y="117" width="0.0265%" height="15" fill="rgb(232,23,21)" fg:x="22384" fg:w="10"/><text x="59.5878%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (10 samples, 0.03%)</title><rect x="59.3378%" y="101" width="0.0265%" height="15" fill="rgb(244,5,23)" fg:x="22384" fg:w="10"/><text x="59.5878%" y="111.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (2,207 samples, 5.85%)</title><rect x="53.6384%" y="181" width="5.8505%" height="15" fill="rgb(226,81,46)" fg:x="20234" fg:w="2207"/><text x="53.8884%" y="191.50">memchr:..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_sse2 (160 samples, 0.42%)</title><rect x="59.0648%" y="165" width="0.4241%" height="15" fill="rgb(247,70,30)" fg:x="22281" fg:w="160"/><text x="59.3148%" y="175.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (160 samples, 0.42%)</title><rect x="59.0648%" y="149" width="0.4241%" height="15" fill="rgb(212,68,19)" fg:x="22281" fg:w="160"/><text x="59.3148%" y="159.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (129 samples, 0.34%)</title><rect x="59.1469%" y="133" width="0.3420%" height="15" fill="rgb(240,187,13)" fg:x="22312" fg:w="129"/><text x="59.3969%" y="143.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (47 samples, 0.12%)</title><rect x="59.3643%" y="117" width="0.1246%" height="15" fill="rgb(223,113,26)" fg:x="22394" fg:w="47"/><text x="59.6143%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (47 samples, 0.12%)</title><rect x="59.3643%" y="101" width="0.1246%" height="15" fill="rgb(206,192,2)" fg:x="22394" fg:w="47"/><text x="59.6143%" y="111.50"></text></g><g><title>memchr::memchr::memchr (3,535 samples, 9.37%)</title><rect x="52.7318%" y="261" width="9.3709%" height="15" fill="rgb(241,108,4)" fg:x="19892" fg:w="3535"/><text x="52.9818%" y="271.50">memchr::memch..</text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (3,535 samples, 9.37%)</title><rect x="52.7318%" y="245" width="9.3709%" height="15" fill="rgb(247,173,49)" fg:x="19892" fg:w="3535"/><text x="52.9818%" y="255.50">memchr::arch:..</text></g><g><title>memchr::memchr::memchr::_{{closure}} (3,366 samples, 8.92%)</title><rect x="53.1798%" y="229" width="8.9229%" height="15" fill="rgb(224,114,35)" fg:x="20061" fg:w="3366"/><text x="53.4298%" y="239.50">memchr::memch..</text></g><g><title>memchr::memchr::memchr_raw (3,366 samples, 8.92%)</title><rect x="53.1798%" y="213" width="8.9229%" height="15" fill="rgb(245,159,27)" fg:x="20061" fg:w="3366"/><text x="53.4298%" y="223.50">memchr::memch..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (3,366 samples, 8.92%)</title><rect x="53.1798%" y="197" width="8.9229%" height="15" fill="rgb(245,172,44)" fg:x="20061" fg:w="3366"/><text x="53.4298%" y="207.50">memchr::arch:..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (986 samples, 2.61%)</title><rect x="59.4889%" y="181" width="2.6138%" height="15" fill="rgb(236,23,11)" fg:x="22441" fg:w="986"/><text x="59.7389%" y="191.50">me..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::new_unchecked (372 samples, 0.99%)</title><rect x="61.1166%" y="165" width="0.9861%" height="15" fill="rgb(205,117,38)" fg:x="23055" fg:w="372"/><text x="61.3666%" y="175.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::max (352 samples, 0.93%)</title><rect x="62.6965%" y="245" width="0.9331%" height="15" fill="rgb(237,72,25)" fg:x="23651" fg:w="352"/><text x="62.9465%" y="255.50"></text></g><g><title>onebrc::Record::add (962 samples, 2.55%)</title><rect x="62.1027%" y="261" width="2.5502%" height="15" fill="rgb(244,70,9)" fg:x="23427" fg:w="962"/><text x="62.3527%" y="271.50">on..</text></g><g><title>core::f32::&lt;impl f32&gt;::min (386 samples, 1.02%)</title><rect x="63.6296%" y="245" width="1.0232%" height="15" fill="rgb(217,125,39)" fg:x="24003" fg:w="386"/><text x="63.8796%" y="255.50"></text></g><g><title>&lt;onebrc::Rows as core::iter::traits::iterator::Iterator&gt;::next (115 samples, 0.30%)</title><rect x="65.5833%" y="245" width="0.3049%" height="15" fill="rgb(235,36,10)" fg:x="24740" fg:w="115"/><text x="65.8333%" y="255.50"></text></g><g><title>memchr::memchr::memchr (115 samples, 0.30%)</title><rect x="65.5833%" y="229" width="0.3049%" height="15" fill="rgb(251,123,47)" fg:x="24740" fg:w="115"/><text x="65.8333%" y="239.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (115 samples, 0.30%)</title><rect x="65.5833%" y="213" width="0.3049%" height="15" fill="rgb(221,13,13)" fg:x="24740" fg:w="115"/><text x="65.8333%" y="223.50"></text></g><g><title>memchr::memchr::memchr::_{{closure}} (115 samples, 0.30%)</title><rect x="65.5833%" y="197" width="0.3049%" height="15" fill="rgb(238,131,9)" fg:x="24740" fg:w="115"/><text x="65.8333%" y="207.50"></text></g><g><title>memchr::memchr::memchr_raw (115 samples, 0.30%)</title><rect x="65.5833%" y="181" width="0.3049%" height="15" fill="rgb(211,50,8)" fg:x="24740" fg:w="115"/><text x="65.8333%" y="191.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (115 samples, 0.30%)</title><rect x="65.5833%" y="165" width="0.3049%" height="15" fill="rgb(245,182,24)" fg:x="24740" fg:w="115"/><text x="65.8333%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (115 samples, 0.30%)</title><rect x="65.5833%" y="149" width="0.3049%" height="15" fill="rgb(242,14,37)" fg:x="24740" fg:w="115"/><text x="65.8333%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (277 samples, 0.73%)</title><rect x="69.7824%" y="133" width="0.7343%" height="15" fill="rgb(246,228,12)" fg:x="26324" fg:w="277"/><text x="70.0324%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (530 samples, 1.40%)</title><rect x="69.3768%" y="149" width="1.4050%" height="15" fill="rgb(213,55,15)" fg:x="26171" fg:w="530"/><text x="69.6268%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (100 samples, 0.27%)</title><rect x="70.5167%" y="133" width="0.2651%" height="15" fill="rgb(209,9,3)" fg:x="26601" fg:w="100"/><text x="70.7667%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (635 samples, 1.68%)</title><rect x="71.6062%" y="133" width="1.6833%" height="15" fill="rgb(230,59,30)" fg:x="27012" fg:w="635"/><text x="71.8562%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2,233 samples, 5.92%)</title><rect x="68.3906%" y="197" width="5.9195%" height="15" fill="rgb(209,121,21)" fg:x="25799" fg:w="2233"/><text x="68.6406%" y="207.50">&lt;std::co..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,233 samples, 5.92%)</title><rect x="68.3906%" y="181" width="5.9195%" height="15" fill="rgb(220,109,13)" fg:x="25799" fg:w="2233"/><text x="68.6406%" y="191.50">&lt;core::h..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,233 samples, 5.92%)</title><rect x="68.3906%" y="165" width="5.9195%" height="15" fill="rgb(232,18,1)" fg:x="25799" fg:w="2233"/><text x="68.6406%" y="175.50">&lt;core::h..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,331 samples, 3.53%)</title><rect x="70.7818%" y="149" width="3.5284%" height="15" fill="rgb(215,41,42)" fg:x="26701" fg:w="1331"/><text x="71.0318%" y="159.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (385 samples, 1.02%)</title><rect x="73.2895%" y="133" width="1.0206%" height="15" fill="rgb(224,123,36)" fg:x="27647" fg:w="385"/><text x="73.5395%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (244 samples, 0.65%)</title><rect x="74.3101%" y="197" width="0.6468%" height="15" fill="rgb(240,125,3)" fg:x="28032" fg:w="244"/><text x="74.5601%" y="207.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (127 samples, 0.34%)</title><rect x="74.6203%" y="181" width="0.3367%" height="15" fill="rgb(205,98,50)" fg:x="28149" fg:w="127"/><text x="74.8703%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (127 samples, 0.34%)</title><rect x="74.6203%" y="165" width="0.3367%" height="15" fill="rgb(205,185,37)" fg:x="28149" fg:w="127"/><text x="74.8703%" y="175.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (127 samples, 0.34%)</title><rect x="74.6203%" y="149" width="0.3367%" height="15" fill="rgb(238,207,15)" fg:x="28149" fg:w="127"/><text x="74.8703%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (81 samples, 0.21%)</title><rect x="77.3533%" y="69" width="0.2147%" height="15" fill="rgb(213,199,42)" fg:x="29180" fg:w="81"/><text x="77.6033%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (290 samples, 0.77%)</title><rect x="76.9716%" y="85" width="0.7688%" height="15" fill="rgb(235,201,11)" fg:x="29036" fg:w="290"/><text x="77.2216%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (65 samples, 0.17%)</title><rect x="77.5681%" y="69" width="0.1723%" height="15" fill="rgb(207,46,11)" fg:x="29261" fg:w="65"/><text x="77.8181%" y="79.50"></text></g><g><title>core::hash::sip::u8to64_le (645 samples, 1.71%)</title><rect x="77.7404%" y="85" width="1.7098%" height="15" fill="rgb(241,35,35)" fg:x="29326" fg:w="645"/><text x="77.9904%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.04%)</title><rect x="79.4078%" y="69" width="0.0424%" height="15" fill="rgb(243,32,47)" fg:x="29955" fg:w="16"/><text x="79.6578%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,568 samples, 4.16%)</title><rect x="75.2962%" y="101" width="4.1566%" height="15" fill="rgb(247,202,23)" fg:x="28404" fg:w="1568"/><text x="75.5462%" y="111.50">&lt;core..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (42 samples, 0.11%)</title><rect x="81.1176%" y="53" width="0.1113%" height="15" fill="rgb(219,102,11)" fg:x="30600" fg:w="42"/><text x="81.3676%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (146 samples, 0.39%)</title><rect x="81.0566%" y="69" width="0.3870%" height="15" fill="rgb(243,110,44)" fg:x="30577" fg:w="146"/><text x="81.3066%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (81 samples, 0.21%)</title><rect x="81.2290%" y="53" width="0.2147%" height="15" fill="rgb(222,74,54)" fg:x="30642" fg:w="81"/><text x="81.4790%" y="63.50"></text></g><g><title>core::cmp::min (97 samples, 0.26%)</title><rect x="81.4437%" y="69" width="0.2571%" height="15" fill="rgb(216,99,12)" fg:x="30723" fg:w="97"/><text x="81.6937%" y="79.50"></text></g><g><title>core::cmp::Ord::min (97 samples, 0.26%)</title><rect x="81.4437%" y="53" width="0.2571%" height="15" fill="rgb(226,22,26)" fg:x="30723" fg:w="97"/><text x="81.6937%" y="63.50"></text></g><g><title>core::cmp::min_by (97 samples, 0.26%)</title><rect x="81.4437%" y="37" width="0.2571%" height="15" fill="rgb(217,163,10)" fg:x="30723" fg:w="97"/><text x="81.6937%" y="47.50"></text></g><g><title>hashbrown::map::make_hash (5,811 samples, 15.40%)</title><rect x="67.9638%" y="229" width="15.4044%" height="15" fill="rgb(213,25,53)" fg:x="25638" fg:w="5811"/><text x="68.2138%" y="239.50">hashbrown::map::make_hash</text></g><g><title>core::hash::BuildHasher::hash_one (5,811 samples, 15.40%)</title><rect x="67.9638%" y="213" width="15.4044%" height="15" fill="rgb(252,105,26)" fg:x="25638" fg:w="5811"/><text x="68.2138%" y="223.50">core::hash::BuildHasher:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,173 samples, 8.41%)</title><rect x="74.9569%" y="197" width="8.4113%" height="15" fill="rgb(220,39,43)" fg:x="28276" fg:w="3173"/><text x="75.2069%" y="207.50">core::hash::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,045 samples, 8.07%)</title><rect x="75.2962%" y="181" width="8.0720%" height="15" fill="rgb(229,68,48)" fg:x="28404" fg:w="3045"/><text x="75.5462%" y="191.50">core::hash:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,045 samples, 8.07%)</title><rect x="75.2962%" y="165" width="8.0720%" height="15" fill="rgb(252,8,32)" fg:x="28404" fg:w="3045"/><text x="75.5462%" y="175.50">core::hash:..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (3,045 samples, 8.07%)</title><rect x="75.2962%" y="149" width="8.0720%" height="15" fill="rgb(223,20,43)" fg:x="28404" fg:w="3045"/><text x="75.5462%" y="159.50">&lt;std::colle..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,045 samples, 8.07%)</title><rect x="75.2962%" y="133" width="8.0720%" height="15" fill="rgb(229,81,49)" fg:x="28404" fg:w="3045"/><text x="75.5462%" y="143.50">&lt;core::hash..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,045 samples, 8.07%)</title><rect x="75.2962%" y="117" width="8.0720%" height="15" fill="rgb(236,28,36)" fg:x="28404" fg:w="3045"/><text x="75.5462%" y="127.50">&lt;core::hash..</text></g><g><title>core::hash::Hasher::write_u8 (1,477 samples, 3.92%)</title><rect x="79.4529%" y="101" width="3.9154%" height="15" fill="rgb(249,185,26)" fg:x="29972" fg:w="1477"/><text x="79.7029%" y="111.50">core..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,353 samples, 3.59%)</title><rect x="79.7816%" y="85" width="3.5867%" height="15" fill="rgb(249,174,33)" fg:x="30096" fg:w="1353"/><text x="80.0316%" y="95.50">&lt;cor..</text></g><g><title>core::hash::sip::u8to64_le (629 samples, 1.67%)</title><rect x="81.7008%" y="69" width="1.6674%" height="15" fill="rgb(233,201,37)" fg:x="30820" fg:w="629"/><text x="81.9508%" y="79.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (216 samples, 0.57%)</title><rect x="84.1105%" y="197" width="0.5726%" height="15" fill="rgb(221,78,26)" fg:x="31729" fg:w="216"/><text x="84.3605%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (61 samples, 0.16%)</title><rect x="84.5214%" y="181" width="0.1617%" height="15" fill="rgb(250,127,30)" fg:x="31884" fg:w="61"/><text x="84.7714%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (267 samples, 0.71%)</title><rect x="85.3034%" y="181" width="0.7078%" height="15" fill="rgb(230,49,44)" fg:x="32179" fg:w="267"/><text x="85.5534%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (267 samples, 0.71%)</title><rect x="85.3034%" y="165" width="0.7078%" height="15" fill="rgb(229,67,23)" fg:x="32179" fg:w="267"/><text x="85.5534%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (267 samples, 0.71%)</title><rect x="85.3034%" y="149" width="0.7078%" height="15" fill="rgb(249,83,47)" fg:x="32179" fg:w="267"/><text x="85.5534%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (106 samples, 0.28%)</title><rect x="85.7302%" y="133" width="0.2810%" height="15" fill="rgb(215,43,3)" fg:x="32340" fg:w="106"/><text x="85.9802%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (4,426 samples, 11.73%)</title><rect x="84.6831%" y="197" width="11.7329%" height="15" fill="rgb(238,154,13)" fg:x="31945" fg:w="4426"/><text x="84.9331%" y="207.50">hashbrown::raw::R..</text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (3,925 samples, 10.40%)</title><rect x="86.0112%" y="181" width="10.4048%" height="15" fill="rgb(219,56,2)" fg:x="32446" fg:w="3925"/><text x="86.2612%" y="191.50">hashbrown::rust..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3,925 samples, 10.40%)</title><rect x="86.0112%" y="165" width="10.4048%" height="15" fill="rgb(233,0,4)" fg:x="32446" fg:w="3925"/><text x="86.2612%" y="175.50">core::cmp::impl..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (3,925 samples, 10.40%)</title><rect x="86.0112%" y="149" width="10.4048%" height="15" fill="rgb(235,30,7)" fg:x="32446" fg:w="3925"/><text x="86.2612%" y="159.50">core::str::trai..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3,925 samples, 10.40%)</title><rect x="86.0112%" y="133" width="10.4048%" height="15" fill="rgb(250,79,13)" fg:x="32446" fg:w="3925"/><text x="86.2612%" y="143.50">core::cmp::impl..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (3,925 samples, 10.40%)</title><rect x="86.0112%" y="117" width="10.4048%" height="15" fill="rgb(211,146,34)" fg:x="32446" fg:w="3925"/><text x="86.2612%" y="127.50">core::slice::cm..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3,925 samples, 10.40%)</title><rect x="86.0112%" y="101" width="10.4048%" height="15" fill="rgb(228,22,38)" fg:x="32446" fg:w="3925"/><text x="86.2612%" y="111.50">&lt;[A] as core::s..</text></g><g><title>[libc.so.6] (2,719 samples, 7.21%)</title><rect x="89.2082%" y="85" width="7.2078%" height="15" fill="rgb(235,168,5)" fg:x="33652" fg:w="2719"/><text x="89.4582%" y="95.50">[libc.so.6]</text></g><g><title>hashbrown::raw::h2 (410 samples, 1.09%)</title><rect x="96.4160%" y="197" width="1.0869%" height="15" fill="rgb(221,155,16)" fg:x="36371" fg:w="410"/><text x="96.6660%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (188 samples, 0.50%)</title><rect x="97.5028%" y="197" width="0.4984%" height="15" fill="rgb(215,215,53)" fg:x="36781" fg:w="188"/><text x="97.7528%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (188 samples, 0.50%)</title><rect x="97.5028%" y="181" width="0.4984%" height="15" fill="rgb(223,4,10)" fg:x="36781" fg:w="188"/><text x="97.7528%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (188 samples, 0.50%)</title><rect x="97.5028%" y="165" width="0.4984%" height="15" fill="rgb(234,103,6)" fg:x="36781" fg:w="188"/><text x="97.7528%" y="175.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (12,275 samples, 32.54%)</title><rect x="65.8882%" y="245" width="32.5398%" height="15" fill="rgb(227,97,0)" fg:x="24855" fg:w="12275"/><text x="66.1382%" y="255.50">hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5,681 samples, 15.06%)</title><rect x="83.3682%" y="229" width="15.0598%" height="15" fill="rgb(234,150,53)" fg:x="31449" fg:w="5681"/><text x="83.6182%" y="239.50">hashbrown::raw::RawTabl..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (5,550 samples, 14.71%)</title><rect x="83.7155%" y="213" width="14.7125%" height="15" fill="rgb(228,201,54)" fg:x="31580" fg:w="5550"/><text x="83.9655%" y="223.50">hashbrown::raw::RawTab..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (161 samples, 0.43%)</title><rect x="98.0012%" y="197" width="0.4268%" height="15" fill="rgb(222,22,37)" fg:x="36969" fg:w="161"/><text x="98.2512%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (161 samples, 0.43%)</title><rect x="98.0012%" y="181" width="0.4268%" height="15" fill="rgb(237,53,32)" fg:x="36969" fg:w="161"/><text x="98.2512%" y="191.50"></text></g><g><title>_start (30,651 samples, 81.25%)</title><rect x="17.7027%" y="565" width="81.2528%" height="15" fill="rgb(233,25,53)" fg:x="6678" fg:w="30651"/><text x="17.9527%" y="575.50">_start</text></g><g><title>__libc_start_main (30,651 samples, 81.25%)</title><rect x="17.7027%" y="549" width="81.2528%" height="15" fill="rgb(210,40,34)" fg:x="6678" fg:w="30651"/><text x="17.9527%" y="559.50">__libc_start_main</text></g><g><title>[libc.so.6] (30,651 samples, 81.25%)</title><rect x="17.7027%" y="533" width="81.2528%" height="15" fill="rgb(241,220,44)" fg:x="6678" fg:w="30651"/><text x="17.9527%" y="543.50">[libc.so.6]</text></g><g><title>std::rt::lang_start (30,651 samples, 81.25%)</title><rect x="17.7027%" y="517" width="81.2528%" height="15" fill="rgb(235,28,35)" fg:x="6678" fg:w="30651"/><text x="17.9527%" y="527.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (30,651 samples, 81.25%)</title><rect x="17.7027%" y="501" width="81.2528%" height="15" fill="rgb(210,56,17)" fg:x="6678" fg:w="30651"/><text x="17.9527%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (30,651 samples, 81.25%)</title><rect x="17.7027%" y="485" width="81.2528%" height="15" fill="rgb(224,130,29)" fg:x="6678" fg:w="30651"/><text x="17.9527%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (30,651 samples, 81.25%)</title><rect x="17.7027%" y="469" width="81.2528%" height="15" fill="rgb(235,212,8)" fg:x="6678" fg:w="30651"/><text x="17.9527%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (30,651 samples, 81.25%)</title><rect x="17.7027%" y="453" width="81.2528%" height="15" fill="rgb(223,33,50)" fg:x="6678" fg:w="30651"/><text x="17.9527%" y="463.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (30,651 samples, 81.25%)</title><rect x="17.7027%" y="437" width="81.2528%" height="15" fill="rgb(219,149,13)" fg:x="6678" fg:w="30651"/><text x="17.9527%" y="447.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (30,651 samples, 81.25%)</title><rect x="17.7027%" y="421" width="81.2528%" height="15" fill="rgb(250,156,29)" fg:x="6678" fg:w="30651"/><text x="17.9527%" y="431.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (30,651 samples, 81.25%)</title><rect x="17.7027%" y="405" width="81.2528%" height="15" fill="rgb(216,193,19)" fg:x="6678" fg:w="30651"/><text x="17.9527%" y="415.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (30,651 samples, 81.25%)</title><rect x="17.7027%" y="389" width="81.2528%" height="15" fill="rgb(216,135,14)" fg:x="6678" fg:w="30651"/><text x="17.9527%" y="399.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (30,651 samples, 81.25%)</title><rect x="17.7027%" y="373" width="81.2528%" height="15" fill="rgb(241,47,5)" fg:x="6678" fg:w="30651"/><text x="17.9527%" y="383.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (30,651 samples, 81.25%)</title><rect x="17.7027%" y="357" width="81.2528%" height="15" fill="rgb(233,42,35)" fg:x="6678" fg:w="30651"/><text x="17.9527%" y="367.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (30,651 samples, 81.25%)</title><rect x="17.7027%" y="341" width="81.2528%" height="15" fill="rgb(231,13,6)" fg:x="6678" fg:w="30651"/><text x="17.9527%" y="351.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (30,651 samples, 81.25%)</title><rect x="17.7027%" y="325" width="81.2528%" height="15" fill="rgb(207,181,40)" fg:x="6678" fg:w="30651"/><text x="17.9527%" y="335.50">core::ops::function::FnOnce::call_once</text></g><g><title>onebrc::main (30,651 samples, 81.25%)</title><rect x="17.7027%" y="309" width="81.2528%" height="15" fill="rgb(254,173,49)" fg:x="6678" fg:w="30651"/><text x="17.9527%" y="319.50">onebrc::main</text></g><g><title>onebrc::parse_from_path (30,651 samples, 81.25%)</title><rect x="17.7027%" y="293" width="81.2528%" height="15" fill="rgb(221,1,38)" fg:x="6678" fg:w="30651"/><text x="17.9527%" y="303.50">onebrc::parse_from_path</text></g><g><title>onebrc::parse (29,012 samples, 76.91%)</title><rect x="22.0476%" y="277" width="76.9080%" height="15" fill="rgb(206,124,46)" fg:x="8317" fg:w="29012"/><text x="22.2976%" y="287.50">onebrc::parse</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (12,940 samples, 34.30%)</title><rect x="64.6529%" y="261" width="34.3027%" height="15" fill="rgb(249,21,11)" fg:x="24389" fg:w="12940"/><text x="64.9029%" y="271.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry</text></g><g><title>std::collections::hash::map::map_entry (199 samples, 0.53%)</title><rect x="98.4280%" y="245" width="0.5275%" height="15" fill="rgb(222,201,40)" fg:x="37130" fg:w="199"/><text x="98.6780%" y="255.50"></text></g><g><title>all (37,723 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(235,61,29)" fg:x="0" fg:w="37723"/><text x="0.2500%" y="607.50"></text></g><g><title>onebrc (37,723 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(219,207,3)" fg:x="0" fg:w="37723"/><text x="0.2500%" y="591.50">onebrc</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (394 samples, 1.04%)</title><rect x="98.9555%" y="565" width="1.0445%" height="15" fill="rgb(222,56,46)" fg:x="37329" fg:w="394"/><text x="99.2055%" y="575.50"></text></g></svg></svg>