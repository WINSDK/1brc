<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="34311"><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.02%)</title><rect x="0.0029%" y="469" width="0.0233%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="8"/><text x="0.2529%" y="479.50"></text></g><g><title>&lt;onebrc::Rows as core::iter::traits::iterator::Iterator&gt;::next (2,134 samples, 6.22%)</title><rect x="2.4715%" y="245" width="6.2196%" height="15" fill="rgb(217,0,24)" fg:x="848" fg:w="2134"/><text x="2.7215%" y="255.50">&lt;onebrc:..</text></g><g><title>memchr::memchr::memchr (872 samples, 2.54%)</title><rect x="6.1496%" y="229" width="2.5415%" height="15" fill="rgb(221,193,54)" fg:x="2110" fg:w="872"/><text x="6.3996%" y="239.50">me..</text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (872 samples, 2.54%)</title><rect x="6.1496%" y="213" width="2.5415%" height="15" fill="rgb(248,212,6)" fg:x="2110" fg:w="872"/><text x="6.3996%" y="223.50">me..</text></g><g><title>memchr::memchr::memchr::_{{closure}} (872 samples, 2.54%)</title><rect x="6.1496%" y="197" width="2.5415%" height="15" fill="rgb(208,68,35)" fg:x="2110" fg:w="872"/><text x="6.3996%" y="207.50">me..</text></g><g><title>memchr::memchr::memchr_raw (872 samples, 2.54%)</title><rect x="6.1496%" y="181" width="2.5415%" height="15" fill="rgb(232,128,0)" fg:x="2110" fg:w="872"/><text x="6.3996%" y="191.50">me..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (872 samples, 2.54%)</title><rect x="6.1496%" y="165" width="2.5415%" height="15" fill="rgb(207,160,47)" fg:x="2110" fg:w="872"/><text x="6.3996%" y="175.50">me..</text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (310 samples, 0.90%)</title><rect x="13.5787%" y="229" width="0.9035%" height="15" fill="rgb(228,23,34)" fg:x="4659" fg:w="310"/><text x="13.8287%" y="239.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (310 samples, 0.90%)</title><rect x="13.5787%" y="213" width="0.9035%" height="15" fill="rgb(218,30,26)" fg:x="4659" fg:w="310"/><text x="13.8287%" y="223.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (310 samples, 0.90%)</title><rect x="13.5787%" y="197" width="0.9035%" height="15" fill="rgb(220,122,19)" fg:x="4659" fg:w="310"/><text x="13.8287%" y="207.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (310 samples, 0.90%)</title><rect x="13.5787%" y="181" width="0.9035%" height="15" fill="rgb(250,228,42)" fg:x="4659" fg:w="310"/><text x="13.8287%" y="191.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (270 samples, 0.79%)</title><rect x="14.4822%" y="229" width="0.7869%" height="15" fill="rgb(240,193,28)" fg:x="4969" fg:w="270"/><text x="14.7322%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (270 samples, 0.79%)</title><rect x="14.4822%" y="213" width="0.7869%" height="15" fill="rgb(216,20,37)" fg:x="4969" fg:w="270"/><text x="14.7322%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (270 samples, 0.79%)</title><rect x="14.4822%" y="197" width="0.7869%" height="15" fill="rgb(206,188,39)" fg:x="4969" fg:w="270"/><text x="14.7322%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (270 samples, 0.79%)</title><rect x="14.4822%" y="181" width="0.7869%" height="15" fill="rgb(217,207,13)" fg:x="4969" fg:w="270"/><text x="14.7322%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (21 samples, 0.06%)</title><rect x="15.2080%" y="165" width="0.0612%" height="15" fill="rgb(231,73,38)" fg:x="5218" fg:w="21"/><text x="15.4580%" y="175.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (45 samples, 0.13%)</title><rect x="15.2692%" y="213" width="0.1312%" height="15" fill="rgb(225,20,46)" fg:x="5239" fg:w="45"/><text x="15.5192%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (107 samples, 0.31%)</title><rect x="15.4003%" y="213" width="0.3119%" height="15" fill="rgb(210,31,41)" fg:x="5284" fg:w="107"/><text x="15.6503%" y="223.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (2,990 samples, 8.71%)</title><rect x="8.6911%" y="245" width="8.7144%" height="15" fill="rgb(221,200,47)" fg:x="2982" fg:w="2990"/><text x="8.9411%" y="255.50">&lt;rustc_hash:..</text></g><g><title>rustc_hash::FxHasher::add_to_hash (733 samples, 2.14%)</title><rect x="15.2692%" y="229" width="2.1363%" height="15" fill="rgb(226,26,5)" fg:x="5239" fg:w="733"/><text x="15.5192%" y="239.50">r..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (581 samples, 1.69%)</title><rect x="15.7122%" y="213" width="1.6933%" height="15" fill="rgb(249,33,26)" fg:x="5391" fg:w="581"/><text x="15.9622%" y="223.50"></text></g><g><title>hashbrown::table::Entry&lt;T,A&gt;::and_modify (2,645 samples, 7.71%)</title><rect x="17.4055%" y="245" width="7.7089%" height="15" fill="rgb(235,183,28)" fg:x="5972" fg:w="2645"/><text x="17.6555%" y="255.50">hashbrown::..</text></g><g><title>onebrc::parse_from_str::_{{closure}}::_{{closure}}::_{{closure}} (2,645 samples, 7.71%)</title><rect x="17.4055%" y="229" width="7.7089%" height="15" fill="rgb(221,5,38)" fg:x="5972" fg:w="2645"/><text x="17.6555%" y="239.50">onebrc::par..</text></g><g><title>onebrc::Record::add (2,645 samples, 7.71%)</title><rect x="17.4055%" y="213" width="7.7089%" height="15" fill="rgb(247,18,42)" fg:x="5972" fg:w="2645"/><text x="17.6555%" y="223.50">onebrc::Rec..</text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (22 samples, 0.06%)</title><rect x="25.1202%" y="213" width="0.0641%" height="15" fill="rgb(241,131,45)" fg:x="8619" fg:w="22"/><text x="25.3702%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (22 samples, 0.06%)</title><rect x="25.1202%" y="197" width="0.0641%" height="15" fill="rgb(249,31,29)" fg:x="8619" fg:w="22"/><text x="25.3702%" y="207.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (213 samples, 0.62%)</title><rect x="25.1843%" y="213" width="0.6208%" height="15" fill="rgb(225,111,53)" fg:x="8641" fg:w="213"/><text x="25.4343%" y="223.50"></text></g><g><title>memchr::memchr::memchr (654 samples, 1.91%)</title><rect x="25.1202%" y="245" width="1.9061%" height="15" fill="rgb(238,160,17)" fg:x="8619" fg:w="654"/><text x="25.3702%" y="255.50">m..</text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (654 samples, 1.91%)</title><rect x="25.1202%" y="229" width="1.9061%" height="15" fill="rgb(214,148,48)" fg:x="8619" fg:w="654"/><text x="25.3702%" y="239.50">m..</text></g><g><title>memchr::memchr::memchr::_{{closure}} (419 samples, 1.22%)</title><rect x="25.8051%" y="213" width="1.2212%" height="15" fill="rgb(232,36,49)" fg:x="8854" fg:w="419"/><text x="26.0551%" y="223.50"></text></g><g><title>memchr::memchr::memchr_raw (419 samples, 1.22%)</title><rect x="25.8051%" y="197" width="1.2212%" height="15" fill="rgb(209,103,24)" fg:x="8854" fg:w="419"/><text x="26.0551%" y="207.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (419 samples, 1.22%)</title><rect x="25.8051%" y="181" width="1.2212%" height="15" fill="rgb(229,88,8)" fg:x="8854" fg:w="419"/><text x="26.0551%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (78 samples, 0.23%)</title><rect x="27.8540%" y="197" width="0.2273%" height="15" fill="rgb(213,181,19)" fg:x="9557" fg:w="78"/><text x="28.1040%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (671 samples, 1.96%)</title><rect x="31.3981%" y="165" width="1.9556%" height="15" fill="rgb(254,191,54)" fg:x="10773" fg:w="671"/><text x="31.6481%" y="175.50">h..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (690 samples, 2.01%)</title><rect x="31.3981%" y="181" width="2.0110%" height="15" fill="rgb(241,83,37)" fg:x="10773" fg:w="690"/><text x="31.6481%" y="191.50">&lt;..</text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (19 samples, 0.06%)</title><rect x="33.3537%" y="165" width="0.0554%" height="15" fill="rgb(233,36,39)" fg:x="11444" fg:w="19"/><text x="33.6037%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (400 samples, 1.17%)</title><rect x="33.4091%" y="165" width="1.1658%" height="15" fill="rgb(226,3,54)" fg:x="11463" fg:w="400"/><text x="33.6591%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (400 samples, 1.17%)</title><rect x="33.4091%" y="149" width="1.1658%" height="15" fill="rgb(245,192,40)" fg:x="11463" fg:w="400"/><text x="33.6591%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (400 samples, 1.17%)</title><rect x="33.4091%" y="133" width="1.1658%" height="15" fill="rgb(238,167,29)" fg:x="11463" fg:w="400"/><text x="33.6591%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (400 samples, 1.17%)</title><rect x="33.4091%" y="117" width="1.1658%" height="15" fill="rgb(232,182,51)" fg:x="11463" fg:w="400"/><text x="33.6591%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (249 samples, 0.73%)</title><rect x="34.5749%" y="165" width="0.7257%" height="15" fill="rgb(231,60,39)" fg:x="11863" fg:w="249"/><text x="34.8249%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (249 samples, 0.73%)</title><rect x="34.5749%" y="149" width="0.7257%" height="15" fill="rgb(208,69,12)" fg:x="11863" fg:w="249"/><text x="34.8249%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (249 samples, 0.73%)</title><rect x="34.5749%" y="133" width="0.7257%" height="15" fill="rgb(235,93,37)" fg:x="11863" fg:w="249"/><text x="34.8249%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (3,603 samples, 10.50%)</title><rect x="33.4091%" y="181" width="10.5010%" height="15" fill="rgb(213,116,39)" fg:x="11463" fg:w="3603"/><text x="33.6591%" y="191.50">hashbrown::raw:..</text></g><g><title>onebrc::hack_map_entry::_{{closure}} (2,954 samples, 8.61%)</title><rect x="35.3006%" y="165" width="8.6095%" height="15" fill="rgb(222,207,29)" fg:x="12112" fg:w="2954"/><text x="35.5506%" y="175.50">onebrc::hack..</text></g><g><title>hashbrown::raw::h2 (696 samples, 2.03%)</title><rect x="43.9130%" y="181" width="2.0285%" height="15" fill="rgb(206,96,30)" fg:x="15067" fg:w="696"/><text x="44.1630%" y="191.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::load (310 samples, 0.90%)</title><rect x="45.9415%" y="181" width="0.9035%" height="15" fill="rgb(218,138,4)" fg:x="15763" fg:w="310"/><text x="46.1915%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (310 samples, 0.90%)</title><rect x="45.9415%" y="165" width="0.9035%" height="15" fill="rgb(250,191,14)" fg:x="15763" fg:w="310"/><text x="46.1915%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (310 samples, 0.90%)</title><rect x="45.9415%" y="149" width="0.9035%" height="15" fill="rgb(239,60,40)" fg:x="15763" fg:w="310"/><text x="46.1915%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (573 samples, 1.67%)</title><rect x="46.8450%" y="165" width="1.6700%" height="15" fill="rgb(206,27,48)" fg:x="16073" fg:w="573"/><text x="47.0950%" y="175.50"></text></g><g><title>onebrc::hack_map_entry (7,647 samples, 22.29%)</title><rect x="27.0263%" y="245" width="22.2873%" height="15" fill="rgb(225,35,8)" fg:x="9273" fg:w="7647"/><text x="27.2763%" y="255.50">onebrc::hack_map_entry</text></g><g><title>hashbrown::table::HashTable&lt;T,A&gt;::entry (7,647 samples, 22.29%)</title><rect x="27.0263%" y="229" width="22.2873%" height="15" fill="rgb(250,213,24)" fg:x="9273" fg:w="7647"/><text x="27.2763%" y="239.50">hashbrown::table::HashTable&lt;T,A&gt;::e..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (7,647 samples, 22.29%)</title><rect x="27.0263%" y="213" width="22.2873%" height="15" fill="rgb(247,123,22)" fg:x="9273" fg:w="7647"/><text x="27.2763%" y="223.50">hashbrown::raw::RawTable&lt;T,A&gt;::find..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (7,285 samples, 21.23%)</title><rect x="28.0814%" y="197" width="21.2323%" height="15" fill="rgb(231,138,38)" fg:x="9635" fg:w="7285"/><text x="28.3314%" y="207.50">hashbrown::raw::RawTableInner::fi..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (847 samples, 2.47%)</title><rect x="46.8450%" y="181" width="2.4686%" height="15" fill="rgb(231,145,46)" fg:x="16073" fg:w="847"/><text x="47.0950%" y="191.50">ha..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (274 samples, 0.80%)</title><rect x="48.5151%" y="165" width="0.7986%" height="15" fill="rgb(251,118,11)" fg:x="16646" fg:w="274"/><text x="48.7651%" y="175.50"></text></g><g><title>std::panic::catch_unwind (22,227 samples, 64.78%)</title><rect x="0.0437%" y="357" width="64.7810%" height="15" fill="rgb(217,147,25)" fg:x="15" fg:w="22227"/><text x="0.2937%" y="367.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (22,227 samples, 64.78%)</title><rect x="0.0437%" y="341" width="64.7810%" height="15" fill="rgb(247,81,37)" fg:x="15" fg:w="22227"/><text x="0.2937%" y="351.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (22,227 samples, 64.78%)</title><rect x="0.0437%" y="325" width="64.7810%" height="15" fill="rgb(209,12,38)" fg:x="15" fg:w="22227"/><text x="0.2937%" y="335.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (22,227 samples, 64.78%)</title><rect x="0.0437%" y="309" width="64.7810%" height="15" fill="rgb(227,1,9)" fg:x="15" fg:w="22227"/><text x="0.2937%" y="319.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (22,227 samples, 64.78%)</title><rect x="0.0437%" y="293" width="64.7810%" height="15" fill="rgb(248,47,43)" fg:x="15" fg:w="22227"/><text x="0.2937%" y="303.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (22,227 samples, 64.78%)</title><rect x="0.0437%" y="277" width="64.7810%" height="15" fill="rgb(221,10,30)" fg:x="15" fg:w="22227"/><text x="0.2937%" y="287.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>onebrc::parse_from_str::_{{closure}}::_{{closure}} (22,227 samples, 64.78%)</title><rect x="0.0437%" y="261" width="64.7810%" height="15" fill="rgb(210,229,1)" fg:x="15" fg:w="22227"/><text x="0.2937%" y="271.50">onebrc::parse_from_str::_{{closure}}::_{{closure}}</text></g><g><title>onebrc::parse_temperature (5,322 samples, 15.51%)</title><rect x="49.3136%" y="245" width="15.5111%" height="15" fill="rgb(222,148,37)" fg:x="16920" fg:w="5322"/><text x="49.5636%" y="255.50">onebrc::parse_temperature</text></g><g><title>pthread_getattr_np (8 samples, 0.02%)</title><rect x="64.8276%" y="341" width="0.0233%" height="15" fill="rgb(234,67,33)" fg:x="22243" fg:w="8"/><text x="65.0776%" y="351.50"></text></g><g><title>malloc (7 samples, 0.02%)</title><rect x="64.8305%" y="325" width="0.0204%" height="15" fill="rgb(247,98,35)" fg:x="22244" fg:w="7"/><text x="65.0805%" y="335.50"></text></g><g><title>[libc.so.6] (7 samples, 0.02%)</title><rect x="64.8305%" y="309" width="0.0204%" height="15" fill="rgb(247,138,52)" fg:x="22244" fg:w="7"/><text x="65.0805%" y="319.50"></text></g><g><title>[libc.so.6] (7 samples, 0.02%)</title><rect x="64.8305%" y="293" width="0.0204%" height="15" fill="rgb(213,79,30)" fg:x="22244" fg:w="7"/><text x="65.0805%" y="303.50"></text></g><g><title>[libc.so.6] (6 samples, 0.02%)</title><rect x="64.8334%" y="277" width="0.0175%" height="15" fill="rgb(246,177,23)" fg:x="22245" fg:w="6"/><text x="65.0834%" y="287.50"></text></g><g><title>std::sys::unix::thread::guard::current (10 samples, 0.03%)</title><rect x="64.8247%" y="357" width="0.0291%" height="15" fill="rgb(230,62,27)" fg:x="22242" fg:w="10"/><text x="65.0747%" y="367.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (22,240 samples, 64.82%)</title><rect x="0.0408%" y="421" width="64.8189%" height="15" fill="rgb(216,154,8)" fg:x="14" fg:w="22240"/><text x="0.2908%" y="431.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (22,240 samples, 64.82%)</title><rect x="0.0408%" y="405" width="64.8189%" height="15" fill="rgb(244,35,45)" fg:x="14" fg:w="22240"/><text x="0.2908%" y="415.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (22,240 samples, 64.82%)</title><rect x="0.0408%" y="389" width="64.8189%" height="15" fill="rgb(251,115,12)" fg:x="14" fg:w="22240"/><text x="0.2908%" y="399.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (22,240 samples, 64.82%)</title><rect x="0.0408%" y="373" width="64.8189%" height="15" fill="rgb(240,54,50)" fg:x="14" fg:w="22240"/><text x="0.2908%" y="383.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>__mmap (18 samples, 0.05%)</title><rect x="64.8597%" y="357" width="0.0525%" height="15" fill="rgb(233,84,52)" fg:x="22254" fg:w="18"/><text x="65.1097%" y="367.50"></text></g><g><title>[libc.so.6] (22,264 samples, 64.89%)</title><rect x="0.0262%" y="469" width="64.8888%" height="15" fill="rgb(207,117,47)" fg:x="9" fg:w="22264"/><text x="0.2762%" y="479.50">[libc.so.6]</text></g><g><title>[libc.so.6] (22,263 samples, 64.89%)</title><rect x="0.0291%" y="453" width="64.8859%" height="15" fill="rgb(249,43,39)" fg:x="10" fg:w="22263"/><text x="0.2791%" y="463.50">[libc.so.6]</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (22,259 samples, 64.87%)</title><rect x="0.0408%" y="437" width="64.8742%" height="15" fill="rgb(209,38,44)" fg:x="14" fg:w="22259"/><text x="0.2908%" y="447.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (19 samples, 0.06%)</title><rect x="64.8597%" y="421" width="0.0554%" height="15" fill="rgb(236,212,23)" fg:x="22254" fg:w="19"/><text x="65.1097%" y="431.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (19 samples, 0.06%)</title><rect x="64.8597%" y="405" width="0.0554%" height="15" fill="rgb(242,79,21)" fg:x="22254" fg:w="19"/><text x="65.1097%" y="415.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (19 samples, 0.06%)</title><rect x="64.8597%" y="389" width="0.0554%" height="15" fill="rgb(211,96,35)" fg:x="22254" fg:w="19"/><text x="65.1097%" y="399.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (19 samples, 0.06%)</title><rect x="64.8597%" y="373" width="0.0554%" height="15" fill="rgb(253,215,40)" fg:x="22254" fg:w="19"/><text x="65.1097%" y="383.50"></text></g><g><title>&lt;onebrc::Rows as core::iter::traits::iterator::Iterator&gt;::next (515 samples, 1.50%)</title><rect x="65.0724%" y="421" width="1.5010%" height="15" fill="rgb(211,81,21)" fg:x="22327" fg:w="515"/><text x="65.3224%" y="431.50"></text></g><g><title>memchr::memchr::memchr (515 samples, 1.50%)</title><rect x="65.0724%" y="405" width="1.5010%" height="15" fill="rgb(208,190,38)" fg:x="22327" fg:w="515"/><text x="65.3224%" y="415.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (515 samples, 1.50%)</title><rect x="65.0724%" y="389" width="1.5010%" height="15" fill="rgb(235,213,38)" fg:x="22327" fg:w="515"/><text x="65.3224%" y="399.50"></text></g><g><title>memchr::memchr::memchr::_{{closure}} (515 samples, 1.50%)</title><rect x="65.0724%" y="373" width="1.5010%" height="15" fill="rgb(237,122,38)" fg:x="22327" fg:w="515"/><text x="65.3224%" y="383.50"></text></g><g><title>memchr::memchr::memchr_raw (515 samples, 1.50%)</title><rect x="65.0724%" y="357" width="1.5010%" height="15" fill="rgb(244,218,35)" fg:x="22327" fg:w="515"/><text x="65.3224%" y="367.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (515 samples, 1.50%)</title><rect x="65.0724%" y="341" width="1.5010%" height="15" fill="rgb(240,68,47)" fg:x="22327" fg:w="515"/><text x="65.3224%" y="351.50"></text></g><g><title>[unknown] (981 samples, 2.86%)</title><rect x="64.9150%" y="469" width="2.8591%" height="15" fill="rgb(210,16,53)" fg:x="22273" fg:w="981"/><text x="65.1650%" y="479.50">[u..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (927 samples, 2.70%)</title><rect x="65.0724%" y="453" width="2.7018%" height="15" fill="rgb(235,124,12)" fg:x="22327" fg:w="927"/><text x="65.3224%" y="463.50">st..</text></g><g><title>onebrc::parse_from_str::_{{closure}}::_{{closure}} (927 samples, 2.70%)</title><rect x="65.0724%" y="437" width="2.7018%" height="15" fill="rgb(224,169,11)" fg:x="22327" fg:w="927"/><text x="65.3224%" y="447.50">on..</text></g><g><title>memchr::memchr::memchr (412 samples, 1.20%)</title><rect x="66.5734%" y="421" width="1.2008%" height="15" fill="rgb(250,166,2)" fg:x="22842" fg:w="412"/><text x="66.8234%" y="431.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (412 samples, 1.20%)</title><rect x="66.5734%" y="405" width="1.2008%" height="15" fill="rgb(242,216,29)" fg:x="22842" fg:w="412"/><text x="66.8234%" y="415.50"></text></g><g><title>memchr::memchr::memchr::_{{closure}} (412 samples, 1.20%)</title><rect x="66.5734%" y="389" width="1.2008%" height="15" fill="rgb(230,116,27)" fg:x="22842" fg:w="412"/><text x="66.8234%" y="399.50"></text></g><g><title>memchr::memchr::memchr_raw (412 samples, 1.20%)</title><rect x="66.5734%" y="373" width="1.2008%" height="15" fill="rgb(228,99,48)" fg:x="22842" fg:w="412"/><text x="66.8234%" y="383.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (412 samples, 1.20%)</title><rect x="66.5734%" y="357" width="1.2008%" height="15" fill="rgb(253,11,6)" fg:x="22842" fg:w="412"/><text x="66.8234%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (6 samples, 0.02%)</title><rect x="67.7742%" y="165" width="0.0175%" height="15" fill="rgb(247,143,39)" fg:x="23254" fg:w="6"/><text x="68.0242%" y="175.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (6 samples, 0.02%)</title><rect x="67.7742%" y="149" width="0.0175%" height="15" fill="rgb(236,97,10)" fg:x="23254" fg:w="6"/><text x="68.0242%" y="159.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (6 samples, 0.02%)</title><rect x="67.7742%" y="133" width="0.0175%" height="15" fill="rgb(233,208,19)" fg:x="23254" fg:w="6"/><text x="68.0242%" y="143.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (6 samples, 0.02%)</title><rect x="67.7742%" y="117" width="0.0175%" height="15" fill="rgb(216,164,2)" fg:x="23254" fg:w="6"/><text x="68.0242%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for &amp;A&gt;::cmp (6 samples, 0.02%)</title><rect x="67.7742%" y="101" width="0.0175%" height="15" fill="rgb(220,129,5)" fg:x="23254" fg:w="6"/><text x="68.0242%" y="111.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (6 samples, 0.02%)</title><rect x="67.7742%" y="85" width="0.0175%" height="15" fill="rgb(242,17,10)" fg:x="23254" fg:w="6"/><text x="68.0242%" y="95.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (6 samples, 0.02%)</title><rect x="67.7742%" y="69" width="0.0175%" height="15" fill="rgb(242,107,0)" fg:x="23254" fg:w="6"/><text x="68.0242%" y="79.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (6 samples, 0.02%)</title><rect x="67.7742%" y="53" width="0.0175%" height="15" fill="rgb(251,28,31)" fg:x="23254" fg:w="6"/><text x="68.0242%" y="63.50"></text></g><g><title>[libc.so.6] (4 samples, 0.01%)</title><rect x="67.7800%" y="37" width="0.0117%" height="15" fill="rgb(233,223,10)" fg:x="23256" fg:w="4"/><text x="68.0300%" y="47.50"></text></g><g><title>_start (7 samples, 0.02%)</title><rect x="67.7742%" y="469" width="0.0204%" height="15" fill="rgb(215,21,27)" fg:x="23254" fg:w="7"/><text x="68.0242%" y="479.50"></text></g><g><title>__libc_start_main (7 samples, 0.02%)</title><rect x="67.7742%" y="453" width="0.0204%" height="15" fill="rgb(232,23,21)" fg:x="23254" fg:w="7"/><text x="68.0242%" y="463.50"></text></g><g><title>[libc.so.6] (7 samples, 0.02%)</title><rect x="67.7742%" y="437" width="0.0204%" height="15" fill="rgb(244,5,23)" fg:x="23254" fg:w="7"/><text x="68.0242%" y="447.50"></text></g><g><title>main (7 samples, 0.02%)</title><rect x="67.7742%" y="421" width="0.0204%" height="15" fill="rgb(226,81,46)" fg:x="23254" fg:w="7"/><text x="68.0242%" y="431.50"></text></g><g><title>std::rt::lang_start_internal (7 samples, 0.02%)</title><rect x="67.7742%" y="405" width="0.0204%" height="15" fill="rgb(247,70,30)" fg:x="23254" fg:w="7"/><text x="68.0242%" y="415.50"></text></g><g><title>std::panic::catch_unwind (7 samples, 0.02%)</title><rect x="67.7742%" y="389" width="0.0204%" height="15" fill="rgb(212,68,19)" fg:x="23254" fg:w="7"/><text x="68.0242%" y="399.50"></text></g><g><title>std::panicking::try (7 samples, 0.02%)</title><rect x="67.7742%" y="373" width="0.0204%" height="15" fill="rgb(240,187,13)" fg:x="23254" fg:w="7"/><text x="68.0242%" y="383.50"></text></g><g><title>std::panicking::try::do_call (7 samples, 0.02%)</title><rect x="67.7742%" y="357" width="0.0204%" height="15" fill="rgb(223,113,26)" fg:x="23254" fg:w="7"/><text x="68.0242%" y="367.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (7 samples, 0.02%)</title><rect x="67.7742%" y="341" width="0.0204%" height="15" fill="rgb(206,192,2)" fg:x="23254" fg:w="7"/><text x="68.0242%" y="351.50"></text></g><g><title>std::panic::catch_unwind (7 samples, 0.02%)</title><rect x="67.7742%" y="325" width="0.0204%" height="15" fill="rgb(241,108,4)" fg:x="23254" fg:w="7"/><text x="68.0242%" y="335.50"></text></g><g><title>std::panicking::try (7 samples, 0.02%)</title><rect x="67.7742%" y="309" width="0.0204%" height="15" fill="rgb(247,173,49)" fg:x="23254" fg:w="7"/><text x="68.0242%" y="319.50"></text></g><g><title>std::panicking::try::do_call (7 samples, 0.02%)</title><rect x="67.7742%" y="293" width="0.0204%" height="15" fill="rgb(224,114,35)" fg:x="23254" fg:w="7"/><text x="68.0242%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (7 samples, 0.02%)</title><rect x="67.7742%" y="277" width="0.0204%" height="15" fill="rgb(245,159,27)" fg:x="23254" fg:w="7"/><text x="68.0242%" y="287.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (7 samples, 0.02%)</title><rect x="67.7742%" y="261" width="0.0204%" height="15" fill="rgb(245,172,44)" fg:x="23254" fg:w="7"/><text x="68.0242%" y="271.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (7 samples, 0.02%)</title><rect x="67.7742%" y="245" width="0.0204%" height="15" fill="rgb(236,23,11)" fg:x="23254" fg:w="7"/><text x="68.0242%" y="255.50"></text></g><g><title>core::ops::function::FnOnce::call_once (7 samples, 0.02%)</title><rect x="67.7742%" y="229" width="0.0204%" height="15" fill="rgb(205,117,38)" fg:x="23254" fg:w="7"/><text x="68.0242%" y="239.50"></text></g><g><title>onebrc::main (7 samples, 0.02%)</title><rect x="67.7742%" y="213" width="0.0204%" height="15" fill="rgb(237,72,25)" fg:x="23254" fg:w="7"/><text x="68.0242%" y="223.50"></text></g><g><title>onebrc::parse_from_path (7 samples, 0.02%)</title><rect x="67.7742%" y="197" width="0.0204%" height="15" fill="rgb(244,70,9)" fg:x="23254" fg:w="7"/><text x="68.0242%" y="207.50"></text></g><g><title>onebrc::parse_from_str (7 samples, 0.02%)</title><rect x="67.7742%" y="181" width="0.0204%" height="15" fill="rgb(217,125,39)" fg:x="23254" fg:w="7"/><text x="68.0242%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2,179 samples, 6.35%)</title><rect x="88.6800%" y="421" width="6.3507%" height="15" fill="rgb(235,36,10)" fg:x="30427" fg:w="2179"/><text x="88.9300%" y="431.50">core::pt..</text></g><g><title>memchr::arch::generic::memchr::fwd_byte_by_byte (5,511 samples, 16.06%)</title><rect x="80.5485%" y="437" width="16.0619%" height="15" fill="rgb(251,123,47)" fg:x="27637" fg:w="5511"/><text x="80.7985%" y="447.50">memchr::arch::generic::me..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw::_{{closure}} (542 samples, 1.58%)</title><rect x="95.0307%" y="421" width="1.5797%" height="15" fill="rgb(221,13,13)" fg:x="32606" fg:w="542"/><text x="95.2807%" y="431.50"></text></g><g><title>&lt;memchr::vector::SensibleMoveMask as memchr::vector::MoveMask&gt;::has_non_zero (511 samples, 1.49%)</title><rect x="96.6133%" y="389" width="1.4893%" height="15" fill="rgb(238,131,9)" fg:x="33149" fg:w="511"/><text x="96.8633%" y="399.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (573 samples, 1.67%)</title><rect x="96.6104%" y="437" width="1.6700%" height="15" fill="rgb(211,50,8)" fg:x="33148" fg:w="573"/><text x="96.8604%" y="447.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (573 samples, 1.67%)</title><rect x="96.6104%" y="421" width="1.6700%" height="15" fill="rgb(245,182,24)" fg:x="33148" fg:w="573"/><text x="96.8604%" y="431.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (572 samples, 1.67%)</title><rect x="96.6133%" y="405" width="1.6671%" height="15" fill="rgb(242,14,37)" fg:x="33149" fg:w="572"/><text x="96.8633%" y="415.50"></text></g><g><title>memchr::vector::x86avx2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m256i&gt;::cmpeq (61 samples, 0.18%)</title><rect x="98.1026%" y="389" width="0.1778%" height="15" fill="rgb(246,228,12)" fg:x="33660" fg:w="61"/><text x="98.3526%" y="399.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (61 samples, 0.18%)</title><rect x="98.1026%" y="373" width="0.1778%" height="15" fill="rgb(213,55,15)" fg:x="33660" fg:w="61"/><text x="98.3526%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (86 samples, 0.25%)</title><rect x="98.6739%" y="405" width="0.2506%" height="15" fill="rgb(209,9,3)" fg:x="33856" fg:w="86"/><text x="98.9239%" y="415.50"></text></g><g><title>&lt;memchr::vector::SensibleMoveMask as memchr::vector::MoveMask&gt;::has_non_zero (97 samples, 0.28%)</title><rect x="98.9770%" y="389" width="0.2827%" height="15" fill="rgb(230,59,30)" fg:x="33960" fg:w="97"/><text x="99.2270%" y="399.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (246 samples, 0.72%)</title><rect x="99.2597%" y="389" width="0.7170%" height="15" fill="rgb(209,121,21)" fg:x="34057" fg:w="246"/><text x="99.5097%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (246 samples, 0.72%)</title><rect x="99.2597%" y="373" width="0.7170%" height="15" fill="rgb(220,109,13)" fg:x="34057" fg:w="246"/><text x="99.5097%" y="383.50"></text></g><g><title>all (34,311 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="34311"/><text x="0.2500%" y="511.50"></text></g><g><title>onebrc (34,311 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(215,41,42)" fg:x="0" fg:w="34311"/><text x="0.2500%" y="495.50">onebrc</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (11,050 samples, 32.21%)</title><rect x="67.7946%" y="469" width="32.2054%" height="15" fill="rgb(224,123,36)" fg:x="23261" fg:w="11050"/><text x="68.0446%" y="479.50">memchr::arch::x86_64::memchr::memchr_raw::find_avx2</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (8,371 samples, 24.40%)</title><rect x="75.6026%" y="453" width="24.3974%" height="15" fill="rgb(240,125,3)" fg:x="25940" fg:w="8371"/><text x="75.8526%" y="463.50">memchr::arch::x86_64::avx2::memchr::One..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_sse2 (590 samples, 1.72%)</title><rect x="98.2804%" y="437" width="1.7196%" height="15" fill="rgb(205,98,50)" fg:x="33721" fg:w="590"/><text x="98.5304%" y="447.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (590 samples, 1.72%)</title><rect x="98.2804%" y="421" width="1.7196%" height="15" fill="rgb(205,185,37)" fg:x="33721" fg:w="590"/><text x="98.5304%" y="431.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (369 samples, 1.08%)</title><rect x="98.9245%" y="405" width="1.0755%" height="15" fill="rgb(238,207,15)" fg:x="33942" fg:w="369"/><text x="99.1745%" y="415.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (8 samples, 0.02%)</title><rect x="99.9767%" y="389" width="0.0233%" height="15" fill="rgb(213,199,42)" fg:x="34303" fg:w="8"/><text x="100.2267%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8 samples, 0.02%)</title><rect x="99.9767%" y="373" width="0.0233%" height="15" fill="rgb(235,201,11)" fg:x="34303" fg:w="8"/><text x="100.2267%" y="383.50"></text></g></svg></svg>